import math

def eye():
    return [
        [1.0, 0.0, 0.0, 0.0],
        [0.0, 1.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 0.0],
        [0.0, 0.0, 0.0, 1.0],
    ]

def x_rotation(rad):
    cosT = math.cos(rad)
    sinT = math.sin(rad)

    return [
        [1.0, 0.0, 0.0, 0.0],
        [0.0, cosT, -sinT, 0.0],
        [0.0, sinT, cosT, 0.0],
        [0.0, 0.0, 0.0, 1.0],
    ]

def y_rotation(rad):
    cosT = math.cos(rad)
    sinT = math.sin(rad)

    return [
        [cosT, 0.0, sinT, 0.0],
        [0.0, 1.0, 0.0, 0.0],
        [-sinT, 0.0, cosT, 0.0],
        [0.0, 0.0, 0.0, 1.0],
    ]

def multiply33(m1, m2):
    return [
        [
            sum([m1[0][0] * m2[0][0], m1[0][1] * m2[1][0], m1[0][2] * m2[2][0]]),
            sum([m1[0][0] * m2[0][1], m1[0][1] * m2[1][1], m1[0][2] * m2[2][1]]),
            sum([m1[0][0] * m2[0][2], m1[0][1] * m2[1][2], m1[0][2] * m2[2][2]]),
            sum([m1[0][0] * m2[0][3], m1[0][1] * m2[1][3], m1[0][2] * m2[2][3]]),
        ], [
            sum([m1[1][0] * m2[0][0], m1[1][1] * m2[1][0], m1[1][2] * m2[2][0]]),
            sum([m1[1][0] * m2[0][1], m1[1][1] * m2[1][1], m1[1][2] * m2[2][1]]),
            sum([m1[1][0] * m2[0][2], m1[1][1] * m2[1][2], m1[1][2] * m2[2][2]]),
        ], [
            sum([m1[2][0] * m2[0][0], m1[2][1] * m2[1][0], m1[2][2] * m2[2][0]]),
            sum([m1[2][0] * m2[0][1], m1[2][1] * m2[1][1], m1[2][2] * m2[2][1]]),
            sum([m1[2][0] * m2[0][2], m1[2][1] * m2[1][2], m1[2][2] * m2[2][2]]),
        ]
    ]

def multiply(m1, m2):
    return [
        [
            sum([m1[0][0] * m2[0][0], m1[0][1] * m2[1][0], m1[0][2] * m2[2][0], m1[0][3] * m2[3][0]]),
            sum([m1[0][0] * m2[0][1], m1[0][1] * m2[1][1], m1[0][2] * m2[2][1], m1[0][3] * m2[3][1]]),
            sum([m1[0][0] * m2[0][2], m1[0][1] * m2[1][2], m1[0][2] * m2[2][2], m1[0][3] * m2[3][2]]),
            sum([m1[0][0] * m2[0][3], m1[0][1] * m2[1][3], m1[0][2] * m2[2][3], m1[0][3] * m2[3][3]]),
        ], [
            sum([m1[1][0] * m2[0][0], m1[1][1] * m2[1][0], m1[1][2] * m2[2][0], m1[1][3] * m2[3][0]]),
            sum([m1[1][0] * m2[0][1], m1[1][1] * m2[1][1], m1[1][2] * m2[2][1], m1[1][3] * m2[3][1]]),
            sum([m1[1][0] * m2[0][2], m1[1][1] * m2[1][2], m1[1][2] * m2[2][2], m1[1][3] * m2[3][2]]),
            sum([m1[1][0] * m2[0][3], m1[1][1] * m2[1][3], m1[1][2] * m2[2][3], m1[1][3] * m2[3][3]]),
        ], [
            sum([m1[2][0] * m2[0][0], m1[2][1] * m2[1][0], m1[2][2] * m2[2][0], m1[2][3] * m2[3][0]]),
            sum([m1[2][0] * m2[0][1], m1[2][1] * m2[1][1], m1[2][2] * m2[2][1], m1[2][3] * m2[3][1]]),
            sum([m1[2][0] * m2[0][2], m1[2][1] * m2[1][2], m1[2][2] * m2[2][2], m1[2][3] * m2[3][2]]),
            sum([m1[2][0] * m2[0][3], m1[2][1] * m2[1][3], m1[2][2] * m2[2][3], m1[2][3] * m2[3][3]]),
        ], [
            sum([m1[3][0] * m2[0][0], m1[3][1] * m2[1][0], m1[3][2] * m2[2][0], m1[3][3] * m2[3][0]]),
            sum([m1[3][0] * m2[0][1], m1[3][1] * m2[1][1], m1[3][2] * m2[2][1], m1[3][3] * m2[3][1]]),
            sum([m1[3][0] * m2[0][2], m1[3][1] * m2[1][2], m1[3][2] * m2[2][2], m1[3][3] * m2[3][2]]),
            sum([m1[3][0] * m2[0][3], m1[3][1] * m2[1][3], m1[3][2] * m2[2][3], m1[3][3] * m2[3][3]]),
        ]
    ]

def apply(m, v):
    v4 = [
        sum([m[0][0] * v[0], m[0][1] * v[1], m[0][2] * v[2], m[0][3] * 1.0]),
        sum([m[1][0] * v[0], m[1][1] * v[1], m[1][2] * v[2], m[1][3] * 1.0]),
        sum([m[2][0] * v[0], m[2][1] * v[1], m[2][2] * v[2], m[2][3] * 1.0]),
        sum([m[3][0] * v[0], m[3][1] * v[1], m[3][2] * v[2], m[3][3] * 1.0]),
    ]
    return [v4[0] / v4[3], v4[1] / v4[3], v4[2] / v4[3]]

def add(m, v):
    return [
        [m[0][0], m[0][1], m[0][2], m[0][3]],
        [m[1][0], m[1][1], m[1][2], m[1][3]],
        [m[2][0], m[2][1], m[2][2], m[2][3]],
        [m[3][0] + v[0], m[3][1] + v[1], m[3][2] + v[2], m[3][3]],
    ]
